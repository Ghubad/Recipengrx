{"remainingRequest":"/Users/u207640/Desktop/Angular/Recipengrx/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/Users/u207640/Desktop/Angular/Recipengrx/node_modules/@ngrx/router-store/fesm5/router-store.js","dependencies":[{"path":"/Users/u207640/Desktop/Angular/Recipengrx/node_modules/@ngrx/router-store/fesm5/router-store.js","mtime":1533168744000},{"path":"/Users/u207640/Desktop/Angular/Recipengrx/node_modules/cache-loader/dist/cjs.js","mtime":1535104167000},{"path":"/Users/u207640/Desktop/Angular/Recipengrx/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["/**\n * @license NgRx 6.1.0\n * (c) 2015-2018 Brandon Roberts, Mike Ryan, Rob Wormald, Victor Savkin\n * License: MIT\n */\n/** PURE_IMPORTS_START _angular_core,_angular_router,_ngrx_store,rxjs PURE_IMPORTS_END */\nimport { Inject, InjectionToken, NgModule } from '@angular/core';\nimport { NavigationCancel, NavigationError, NavigationEnd, Router, RoutesRecognized } from '@angular/router';\nimport { select, Store } from '@ngrx/store';\nimport { of } from 'rxjs';\nvar RouterStateSerializer = /** @class */ /*@__PURE__*/ (function () {\n    function RouterStateSerializer() {\n    }\n    return RouterStateSerializer;\n}());\nvar DefaultRouterStateSerializer = /** @class */ /*@__PURE__*/ (function () {\n    function DefaultRouterStateSerializer() {\n    }\n    DefaultRouterStateSerializer.prototype.serialize = function (routerState) {\n        return {\n            root: this.serializeRoute(routerState.root),\n            url: routerState.url,\n        };\n    };\n    DefaultRouterStateSerializer.prototype.serializeRoute = function (route) {\n        var _this = this;\n        var children = route.children.map(function (c) { return _this.serializeRoute(c); });\n        return {\n            params: route.params,\n            paramMap: route.paramMap,\n            data: route.data,\n            url: route.url,\n            outlet: route.outlet,\n            routeConfig: {\n                component: route.routeConfig ? route.routeConfig.component : undefined,\n            },\n            queryParams: route.queryParams,\n            queryParamMap: route.queryParamMap,\n            fragment: route.fragment,\n            component: (route.routeConfig\n                ? route.routeConfig.component\n                : undefined),\n            root: undefined,\n            parent: undefined,\n            firstChild: children[0],\n            pathFromRoot: undefined,\n            children: children,\n        };\n    };\n    return DefaultRouterStateSerializer;\n}());\nvar __assign = (undefined && undefined.__assign) || Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n        for (var p in s)\n            if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n    }\n    return t;\n};\n/**\n * An action dispatched when the router navigates.\n */\nvar ROUTER_NAVIGATION = 'ROUTER_NAVIGATION';\n/**\n * An action dispatched when the router cancels navigation.\n */\nvar ROUTER_CANCEL = 'ROUTER_CANCEL';\n/**\n * An action dispatched when the router errors.\n */\nvar ROUTER_ERROR = 'ROUTE_ERROR';\nfunction routerReducer(state, action) {\n    switch (action.type) {\n        case ROUTER_NAVIGATION:\n        case ROUTER_ERROR:\n        case ROUTER_CANCEL:\n            return {\n                state: action.payload.routerState,\n                navigationId: action.payload.event.id,\n            };\n        default:\n            return state;\n    }\n}\nvar _ROUTER_CONFIG = /*@__PURE__*/ new InjectionToken('@ngrx/router-store Internal Configuration');\nvar ROUTER_CONFIG = /*@__PURE__*/ new InjectionToken('@ngrx/router-store Configuration');\nvar DEFAULT_ROUTER_FEATURENAME = 'routerReducer';\nfunction _createDefaultRouterConfig(config) {\n    var _config;\n    if (typeof config === 'function') {\n        _config = config();\n    }\n    else {\n        _config = config || {};\n    }\n    return __assign({ stateKey: DEFAULT_ROUTER_FEATURENAME }, _config);\n}\nvar Éµ0 = { stateKey: DEFAULT_ROUTER_FEATURENAME };\n/**\n * Connects RouterModule with StoreModule.\n *\n * During the navigation, before any guards or resolvers run, the router will dispatch\n * a ROUTER_NAVIGATION action, which has the following signature:\n *\n * ```\n * export type RouterNavigationPayload = {\n *   routerState: SerializedRouterStateSnapshot,\n *   event: RoutesRecognized\n * }\n * ```\n *\n * Either a reducer or an effect can be invoked in response to this action.\n * If the invoked reducer throws, the navigation will be canceled.\n *\n * If navigation gets canceled because of a guard, a ROUTER_CANCEL action will be\n * dispatched. If navigation results in an error, a ROUTER_ERROR action will be dispatched.\n *\n * Both ROUTER_CANCEL and ROUTER_ERROR contain the store state before the navigation\n * which can be used to restore the consistency of the store.\n *\n * Usage:\n *\n * ```typescript\n * @NgModule({\n *   declarations: [AppCmp, SimpleCmp],\n *   imports: [\n *     BrowserModule,\n *     StoreModule.forRoot(mapOfReducers),\n *     RouterModule.forRoot([\n *       { path: '', component: SimpleCmp },\n *       { path: 'next', component: SimpleCmp }\n *     ]),\n *     StoreRouterConnectingModule\n *   ],\n *   bootstrap: [AppCmp]\n * })\n * export class AppModule {\n * }\n * ```\n */\nvar StoreRouterConnectingModule = /** @class */ /*@__PURE__*/ (function () {\n    function StoreRouterConnectingModule(store, router, serializer, config) {\n        this.store = store;\n        this.router = router;\n        this.serializer = serializer;\n        this.config = config;\n        this.dispatchTriggeredByRouter = false;\n        this.navigationTriggeredByDispatch = false;\n        this.stateKey = this.config.stateKey;\n        this.setUpBeforePreactivationHook();\n        this.setUpStoreStateListener();\n        this.setUpStateRollbackEvents();\n    }\n    StoreRouterConnectingModule.forRoot = function (config) {\n        if (config === void 0) {\n            config = {};\n        }\n        return {\n            ngModule: StoreRouterConnectingModule,\n            providers: [\n                { provide: _ROUTER_CONFIG, useValue: config },\n                {\n                    provide: ROUTER_CONFIG,\n                    useFactory: _createDefaultRouterConfig,\n                    deps: [_ROUTER_CONFIG],\n                },\n            ],\n        };\n    };\n    StoreRouterConnectingModule.prototype.setUpBeforePreactivationHook = function () {\n        var _this = this;\n        this.router.hooks.beforePreactivation = function (routerState) {\n            _this.routerState = _this.serializer.serialize(routerState);\n            if (_this.shouldDispatchRouterNavigation()) {\n                _this.dispatchRouterNavigation();\n            }\n            return of(true);\n        };\n    };\n    StoreRouterConnectingModule.prototype.setUpStoreStateListener = function () {\n        var _this = this;\n        this.store.subscribe(function (s) {\n            _this.storeState = s;\n        });\n        this.store.pipe(select(this.stateKey)).subscribe(function () {\n            _this.navigateIfNeeded();\n        });\n    };\n    StoreRouterConnectingModule.prototype.shouldDispatchRouterNavigation = function () {\n        if (!this.storeState[this.stateKey])\n            return true;\n        return !this.navigationTriggeredByDispatch;\n    };\n    StoreRouterConnectingModule.prototype.navigateIfNeeded = function () {\n        if (!this.storeState[this.stateKey] ||\n            !this.storeState[this.stateKey].state) {\n            return;\n        }\n        if (this.dispatchTriggeredByRouter)\n            return;\n        if (this.router.url !== this.storeState[this.stateKey].state.url) {\n            this.navigationTriggeredByDispatch = true;\n            this.router.navigateByUrl(this.storeState[this.stateKey].state.url);\n        }\n    };\n    StoreRouterConnectingModule.prototype.setUpStateRollbackEvents = function () {\n        var _this = this;\n        this.router.events.subscribe(function (e) {\n            if (e instanceof RoutesRecognized) {\n                _this.lastRoutesRecognized = e;\n            }\n            else if (e instanceof NavigationCancel) {\n                _this.dispatchRouterCancel(e);\n            }\n            else if (e instanceof NavigationError) {\n                _this.dispatchRouterError(e);\n            }\n            else if (e instanceof NavigationEnd) {\n                _this.dispatchTriggeredByRouter = false;\n                _this.navigationTriggeredByDispatch = false;\n            }\n        });\n    };\n    StoreRouterConnectingModule.prototype.dispatchRouterNavigation = function () {\n        this.dispatchRouterAction(ROUTER_NAVIGATION, {\n            routerState: this.routerState,\n            event: new RoutesRecognized(this.lastRoutesRecognized.id, this.lastRoutesRecognized.url, this.lastRoutesRecognized.urlAfterRedirects, this.routerState),\n        });\n    };\n    StoreRouterConnectingModule.prototype.dispatchRouterCancel = function (event) {\n        this.dispatchRouterAction(ROUTER_CANCEL, {\n            routerState: this.routerState,\n            storeState: this.storeState,\n            event: event,\n        });\n    };\n    StoreRouterConnectingModule.prototype.dispatchRouterError = function (event) {\n        this.dispatchRouterAction(ROUTER_ERROR, {\n            routerState: this.routerState,\n            storeState: this.storeState,\n            event: new NavigationError(event.id, event.url, \"\" + event),\n        });\n    };\n    StoreRouterConnectingModule.prototype.dispatchRouterAction = function (type, payload) {\n        this.dispatchTriggeredByRouter = true;\n        try {\n            this.store.dispatch({ type: type, payload: payload });\n        }\n        finally {\n            this.dispatchTriggeredByRouter = false;\n            this.navigationTriggeredByDispatch = false;\n        }\n    };\n    return StoreRouterConnectingModule;\n}());\n/**\n * DO NOT EDIT\n *\n * This file is automatically generated at build\n */\n/**\n * Generated bundle index. Do not edit.\n */\nexport { _ROUTER_CONFIG as Éµngrx_modules_router_store_router_store_a, _createDefaultRouterConfig as Éµngrx_modules_router_store_router_store_b, ROUTER_ERROR, ROUTER_CANCEL, ROUTER_NAVIGATION, routerReducer, StoreRouterConnectingModule, ROUTER_CONFIG, DEFAULT_ROUTER_FEATURENAME, RouterStateSerializer, DefaultRouterStateSerializer };\n//# sourceMappingURL=router-store.js.map\n",null]}